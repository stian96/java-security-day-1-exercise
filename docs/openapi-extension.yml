openapi: 0.0.1
info:
  title: Video Game Library API (Extension)
  description: API for managing video games, users, and borrowing functionality
  version: 1.0.0
  contact:
    name: Java Security, Day 1 Extension

servers:
  - url: http://localhost:4000

tags:
  - name: users
  - name: borrowing

paths:
  /users:
    post:
      tags:
        - users
      summary: Create a new user
      description: Add a new user to the system
      operationId: createUser
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getUsers
      security:
        - basicAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '401':
          description: Unauthorized

  /users/{id}:
    put:
      tags:
        - users
      summary: Update a user
      description: Update the information of a user by ID
      operationId: updateUser
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    delete:
      tags:
        - users
      summary: Delete a user
      description: Remove a user from the system by ID
      operationId: deleteUser
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /borrow:
    post:
      tags:
        - borrowing
      summary: Borrow a game
      description: Allow a user to borrow a game from the library
      operationId: borrowGame
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowRequest'
      responses:
        '200':
          description: Game borrowed successfully
        '401':
          description: Unauthorized

  /return:
    post:
      tags:
        - borrowing
      summary: Return a borrowed game
      description: Allow a user to return a game to the library
      operationId: returnGame
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnRequest'
      responses:
        '200':
          description: Game returned successfully
        '401':
          description: Unauthorized

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    CreateUser:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"

    User:
      allOf:
        - $ref: '#/components/schemas/CreateUser'
        - type: object
          properties:
            id:
              type: integer
              example: 1

    AllUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'

    BorrowRequest:
      type: object
      required:
        - userId
        - gameId
      properties:
        userId:
          type: integer
          example: 1
        gameId:
          type: integer
          example: 100

    ReturnRequest:
      type: object
      required:
        - userId
        - gameId
      properties:
        userId:
          type: integer
        gameId:
          type: integer
